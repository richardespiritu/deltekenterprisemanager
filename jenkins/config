pipeline {
    agent { label 'linux' }
    
    parameters {
        choice (name: 'AWS Environment',
            choices : ['','dco', 'flexplus','costpoint', 'goss', 'deltekdev'],
            description : 'AWS environment where the script will be executed.')
        choice (name: 'Execution Type',
            choices : ['','STOP_DB', 'START_DB','HEALTHCHECK_DB'],
            description : 'Type of DB execution that will be running')  
    }

    stages {
        stage('Required parameters'){
            steps{
                script{
                    def csvPath = "${params['Server List - CSV']}"
                    
                    
                        if (csvPath == ''){
                            currentBuild.result = 'ABORTED'
                            error('Parameter for CSV Path is not set')
                        }
                        else{
                            echo "You are currently running: " + csvPath
                        }
                    
                }
            }
            
        }
        stage('Checkout Source') {
            steps {
                sh 'python3 --version'
                sh 'pip3 install pandas'
                checkout([$class: 'GitSCM', branches: [[name: "*/main"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: "https://github.com/tuneo13/sql-service-controller"]]])
            }
        }
        stage('Approval Step') {            
            steps {
                input message: "Approve?"
            }
        }  
        stage('Execute Shell') {
            steps {
                script {
                    def awsCredential = null
                    def awsEnvironment = "${params['AWS Environment']}"
                    
                    switch(awsEnvironment) {
                        case 'deltekdev':
                            awsCredential = 'infra-at-dev'
                            break
                        case 'dco':
                            awsCredential = 'infra-at-dco'
                            break
                        case 'flexplus':
                            awsCredential = 'infra-at-flexplus'
                            break    
                        case 'costpoint':
                            awsCredential = 'infra-at-costpoint'
                            break
                        case 'goss':
                            awsCredential = 'infra-at-oss'
                            break    
                    }                    
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding',credentialsId: "${awsCredential}", accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                        sh "python3 cp-dbexecute-tool.py"
                    }
                    
                    
                }
            }
        }
    }
}
